#!/bin/bash
# =========================================================================
# =========================================================================
#
#	rustc.lib
#
#		A library of support functions and utilities for rustc bash scripts.
#
# =========================================================================
#
#	NOTE - this module must load after rustc.lib
#
#	Load Sequence
#		rustc.dcl
#		rustc.lib
#       rustc.hlp
#		
# =========================================================================
# =========================================================================
#
# @author Jay Wheeler.
# @version 0.1.0
# @copyright © 2019. EarthWalk Software.
# @license Licensed under the GNU General Public License, GPL-3.0-or-later.
# @package ewsdocker/ldc-dev
# @subpackage rustc.lib
#
# =========================================================================
#
#	Copyright © 2019. EarthWalk Software
#	Licensed under the GNU General Public License, GPL-3.0-or-later.
#
#   This file is part of ewsdocker/ldc-dev.
#
#   ewsdocker/ldc-dev is free software: you can redistribute 
#   it and/or modify it under the terms of the GNU General Public License 
#   as published by the Free Software Foundation, either version 3 of the 
#   License, or (at your option) any later version.
#
#   ewsdocker/ldc-dev is distributed in the hope that it will 
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ewsdocker/ldc-dev.  If not, see 
#   <http://www.gnu.org/licenses/>.
#
# =========================================================================
# =========================================================================

# =========================================================================
# =========================================================================
#
#	A library of support functions and utilities
#
# =========================================================================
# =========================================================================

# =========================================================================
# =========================================================================
#
#	Dependencies:
#		lmsArchiveUtilities.lib
#		lmsBashVars.lib
#		lmsDisplay.lib
#		lmsPath.lib
#		
# =========================================================================
# =========================================================================

# =========================================================================
# =========================================================================
#
#	rustc.lib Functions
#
#        VERB      FUNCTION
#       =======  =============
#       archive  rustclib_Archive
#       build    rustclib_Build
#       compile  rustclib_Compile
#       error    rustclib_Error
#		install  rustclib_Install
#       new      rustclib_New
#       path     rustclib_Path
#       setup    rustclib_Setup
#
# =========================================================================
# =========================================================================

# =========================================================================
#
#    rustclib_Archive - create an archive of the installed rustc compiler
#
#	Entry:
#		pkg = rustc package name (defaults to $rcPkg)
#		src = source of the archive (folder path)
#		opts = (optional) tar options
#
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_Archive()
{
	local l_pkg=${1:-"$rcPkg"}
	local l_src=${2:-""}
	local l_opts=${3:-""}
	
	while (true)
	do
		[[ -z ${l_pkg} || -z ${l_src} ]] && 
		 {
			rustclib_Error "param"
			rcResult=1
			break
		 }

		local l_tarball="${l_pkg}.tar"
		local l_tgz="${l_tarball}.gz"

		[[ -e "${l_tarball}" ]] && rm "${l_tarball}"
		[[ -e "${l_tgz}" ]] && rm "${l_tgz}"

		lmsArchive "${l_pkg}" "${l_src}" "${rcRepo}" "1" "${l_opts}"
		[[ $? -eq 0 ]] || 
		 {
			rustclib_Error "archive"
			rcResult=2
			break
		 }

	done

	return $rcResult
}

# =========================================================================
#
#    rustclib_Build - download and build (install) rust compiler
#
#	Entry:
#		rust_url = URL of the script server
#		rust_pkg = the script package to download
#
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_Build()
{
	local lurl="${1}"
	local lpkg="${2}"

	while (true)
	do
		[[ -z "${lurl}" || -z "${lpkg}" ]] && 
		 {
			rustclib_Error "param"
			rcResult=1
			break
		 }

		wget ${lurl}
		[[ $? -eq 0 ]] || 
		 {
			rustclib_Error "host"
       		rcResult=2
			break
		 }

		chmod +x ./${lpkg}

		./${lpkg} -y -v --no-modify-path
		[[ $? -eq 0 ]] || 
		 {
			rustclib_Error "package"
       		rcResult=3
			break
		 }

		rustclib_Path '${HOME}/.cargo/bin'
		[[ $? -eq 0 ]] || 
		 {
			rustclib_Error "path"
       		rcResult=4
			break
		 }

		break
	done

	return $rcResult
}

# =========================================================================
#
#    rustclib_Command - select (execute) the requested function, if valid
#
#	parameters:
#		cmdVerb = command (verb) to execute (defaults to "help")
#		cmdAdverb = (optional) command arguments (defaults to none)
#		cmdMod = (optional) extra mods to adverb
#
#    Result:
#        0 = no error
#        non-zero = error number
#
# =========================================================================
function rustclib_Command()
{
	local    cmdVerb=${1:-"help"}
	local    cmdAdverb=${2:-""}
	local    cmdMod=${3:-""}

	rcResult=0

	while (true)
	do
		[[ ${rustVList} =~ ${cmdVerb} ]] || 
		 {
        	rustclib_Error "verb"
			rcResult=1
			break
		 }

 		"${rustVerbs[$cmdVerb]}" "${cmdAdverb}" "${cmdMod}"
		[[ $? -eq 0 ]] ||
		 {
        	rustclib_Error "exec"
			rcResult=2
		 }
	
		break
	done

	return $rcResult
}

# =========================================================================
#
#    rustclib_Compile - compile the rust program
#
#	Entry:
#		cadverb = string containing name of source to compile
#		copts = (optional) string containing compile options
#
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_Compile()
{
	local cadverb=${1:-"$rcAdverb"}
	local copts=${2:-""}

	while (true)
	do
		[[ -z ${cadverb} ]] && 
		 {
        	rustclib_Error "param"
			rcResult=1
			break
		 }

		echo "${cadverb}=/${cadverb}" >> ${HOME}/.bashrc

		rustclib_Path '${HOME}/.cargo/bin'
		[[ ${rcResult} -eq 0 ]] || 
		 {
        	rustclib_Error "path"
			rcResult=2
			break
		 }

		[[ -z ${copts} ]] && cargo install --force "${cadverb}" || cargo install " ${copts} ${cadverb}"
		rcResult=$?

		[[ $rcResult -eq 0 ]] || 
		 {
			rustclib_Error "cargop"
			rcResult=3
			break
		 }

		ln -s ~/.cargo/bin/${cadverb} /usr/local/bin/${cadverb}
		rcResult=$?

		[[ $rcResult -eq 0 ]] || 
		 {
			rustclib_Error "cargop"
			rcResult=4
			break
		 }

        break
    done

	return ${rcResult}
}

# =========================================================================
#
#    rustclib_Error
#
#	Entry:
#		rcError = name of the error
#       rcStack = 1 to output call stack, 0 to not
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_Error()
{
	rcError=${1:-"none"}
	rcStack=${2:-"0"}

	rcResult=0

	while (true)
	do
		[[ ${rcEList} =~ ${rcError} ]] || 
		 {
	 		[[ $rcRecurse -eq 0 ]] && 
		     {
			    rcRecurse=1
			    rustclib_Error "error"
             }

            rcResult=1
            break
		 }

		rcEMsg=${rcEMsgs[$rcError]}

		bashLineLocation "rcELoc"  "rustclib_Error"
		[[ $? -gt 1 ]] && 
		 {
	 		[[ $rcRecurse -eq 0 ]] && 
		     {
			    rcRecurse=1
			    rustclib_Error "error"
             }

			rcResult=2
			break
		 }

		rcEIndex=0
		while [ ${rcEIndex} -lt ${#rcErrors[*]} ]
		do
			[[ "$rcError" == "${rcErrors[$rcEIndex]}" ]] && break
			let rcEIndex=${rcEIndex}+1
		done

		[[ ${rcEIndex} -lt ${#rcErrors[*]} ]] || 
		 {
	 		[[ $rcRecurse -eq 0 ]] && 
		     {
			    rcRecurse=1
			    rustclib_Error "error"
             }

            rcResult=3
			break
		 }

		break

	done
lmsDmpVar

	return ${rcResult}
}

# =========================================================================
#
#    rustclib_ErrorReset
#
#	Entry:
#		none
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_ErrorReset()
{
	rustclib_Error "none"
	return $?
}

# =========================================================================
#
#  rustclib_Install - install compiler
#
#	Entry:
#		none
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_Install()
{
	while (true)
	do
		wget "${RUP_URL}"
		[[ $? -eq 0 ]] || 
		 {
			rustclib_Error "host"
			rcResult=1
			break
		 }

		tar -xvf "${RUP_PKG}"
		[[ $? -eq 0 ]] || 
		 {
			rustclib_Error "archive"
			rcResult=2
			break
		 }

		rm "${RUP_PKG}"

		rustclib_Path '${HOME}/.cargo/bin'
		[[ $? -eq 0 ]] || break
		 {
			rustclib_Error "path"
			rcResult=3
			break
		 }

		break

	done
	
	return $rcResult
}

# =========================================================================
#
#    rustclib_New - remove currently installed rust compiler from the container
#
#	Entry:
#		none
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_New()
{
	[[ -e "${HOME}/.rust"   ]] && rm -Rf "${HOME}/.rustup"  1 > /dev/null 2>&1
	[[ -e "${HOME}/.cargo"  ]] && rm -Rf "${HOME}/.cargo"   1 > /dev/null 2>&1
	[[ -e "${HOME}/.bashrc" && ${rcContainer} -eq 1 ]] && rm -Rf "${HOME}/.bashrc"  1 > /dev/null 2>&1

	rustclib_ErrorReset
	return ${rcResult}
}

# =========================================================================
#
#    rustclib_ParseInput - parse the cli into the cliParam and cliKey arrays
#
#	parameters:
#		none
#
#    Result:
#        0 = no error
#        1 = no input or bad format
#
#	Note:
#		lmsConInParse places the name value in the next cliKey array element,
#		  then places the value in the cliParam at the name array element
#
#		For an expression such as
#          run=myprog.sh
#
#		   cliKey[0] = run
#          cliParam[run] = myprog.sh
#
# =========================================================================
function rustclib_ParseInput()
{
	rcResult=0

	lmsConInParse
	[[ $? -eq 0 ]] ||
	 {
		rustclib_Error "parse"
       	rcResult=1
	 }

    return ${rcResult}
}

# =========================================================================
#
#    rustclib_Path - add an element in $PATH
#
#	Entry:
#		rPath = path entry to add
#
#	Exit:
#		0 = requested path (rPath) was added
#		non-zero = requested path (rPath) was not found
#
# =========================================================================
function rustclib_Path()
{
	local    rPath=${1:-""}

	while (true)
	do
		[[ -z ${rPath} ]] && 
		 {
			rustclib_Error "param"
			rcResult=1
			break
		 }

		lpathExists '${rPath}'
		[[ $? -eq 0 ]] ||
		 {
			lpathAdd '${rPath}'
			[[ $? -eq 0 ]] || 
			 {
				rustclib_Error "path"
				rcResult=2
				break
			 }

 			lpathCommit
			[[ $? -eq 0 ]] || 
			 {
				rustclib_Error "path"
				rcResult=3
				break
			 }

		 }

		break

	done

	return $rcResult
}

# =========================================================================
#
#    rustclib_Show - Show selected repo folder contents
#
#	Entry:
#		title = (optional) title string, defaults to blank line
#		foot = (optional) footer string, defaults to blank line
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib_Show()
{
	rcResult=0

	while (true)
	do
		ls -la ${rcRepo}/${rcPkg}*.*
		[[ $? -eq 0 ]] ||
		 {
			rustclib_Error "file" 1
			rcResult=1
			break
		 }

		ls -la ${rcRepo}/${rcCPkg}*.*
		[[ $? -eq 0 ]] ||
		 {
			rustclib_Error "file" 1
			rcResult=2
			break
		 }

		break
	done

	return $rcResult
}

# =========================================================================
# =========================================================================
#
#		Easy entry point... 
#
# =========================================================================
# =========================================================================

# =========================================================================
#
#    rustclib - easy to remember interface to the library (calls rustclib_Command)
#
#	Entry:
#		rVerb = library command
#		rAdverb = (optional) command modifier(s)
#       rMod = (optional) additional information to pass to the command
#	Exit:
#		0 = no error
#		non-zero = error code
#
# =========================================================================
function rustclib()
{
	local    rVerb=${1:-"help"}
	local    rAdverb=${2:-""}
	local    rMod=${3:-""}

	rustclib_Command ${rVerb} "${rAdverb}" "${rMod}"
	return $?
}

# =========================================================================
#
#		End of the Library
#
# =========================================================================
